version: 3.8
services:
  build: 
    context: ./server
    # Target should only be development, test or production.
    # Using other NODE_ENV values will require the dockerfile to be updated.
    targer: ${NODE_ENV} 
  ports:
    - "${SERVER_PORT}:${SERVER_PORT}"
  environment:
    - NODE_ENV=${NODE_ENV}
    - NODE_ENV_NAME=${NODE_ENV_NAME}
    - DB_URI=${DB_URI}
    - DB_OPERATIONAL_SCHEMA=${DB_OPERATIONAL_SCHEMA}
    - DB_AUDIT_SCHEMA=${DB_AUDIT_SCHEMA}
    - DB_AUDIT_ENABLED=${DB_AUDIT_ENABLED}
    - DB_API_USER=${DB_API_USER}
    - DB_API_USER_PASSWORD=${DB_API_USER_PASSWORD}
  depends_on:
    - db

  client:
    build: 
      context: ./client
      # Target should only be development, test or production.
      # Using other NODE_ENV values will require the dockerfile to be updated.
      target: ${NODE_ENV}
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - server

  db:
    image: postgres:13
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${DB_SUPER_USER}
      - POSTGRES_PASSWORD=${DB_SUPER_USER_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/data/postgres

  volumes:
    postgres_data:
